//Maximum distinct lowercase alphabets between two uppercase.
// In this solution we are using extra space
import java.util.*;
public class Practice 
{
	static final int MAX_CHAR = 26;
    static int maxLower(char[] cs) 
    {
    	int maxlen=0;
    	int i=0;
    	int n=cs.length;
    	for(;i<n;i++)
    	{
    		if(cs[i]>='A' && cs[i]<='Z')
    		{
    			i++;
    			break;
    		}
    	}
    	HashSet<Integer> ans = new HashSet<>();
    	for(;i<n;i++)
    	{
    		if(cs[i]>='A' && cs[i]<='Z')
    		{
    			maxlen = Math.max(maxlen, ans.size());
    			ans.clear();
    		}
    		if(cs[i]>='a' && cs[i]<='z')
    			ans.add((int)cs[i]);
    	}
    	return maxlen;
    }
	public static void main(String[] args) 
	{
		String str = "zaAbbaazzC";
        System.out.println(maxLower(str.toCharArray()));
	}
}
// This is efficient solution 
import java.util.Arrays;
 
class GFG 
{
 
    static final int MAX_CHAR = 26;
 
    // Function which computes the
    // maximum number of distinct
    // lowercase alphabets between
    // two uppercase alphabets
    static int maxLower(String str) 
    {
        int n = str.length();
 
        // Ignoring lowercase characters in the
        // beginning.
        int i = 0;
        for (; i < n; i++)
        {
            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z')
            {
                i++;
                break;
            }
        }
 
        // We start from next of first capital letter
        // and traverse through remaining character.
        int maxCount = 0;
        int count[] = new int[MAX_CHAR];
        for (; i < n; i++) 
        {
 
            // If character is in uppercase,
            if (str.charAt(i) >= 'A' && str.charAt(i) <= 'Z') 
            {
 
                // Count all distinct lower case
                // characters
                int currCount = 0;
                for (int j = 0; j < MAX_CHAR; j++) 
                {
                    if (count[j] > 0) 
                    {
                        currCount++;
                    }
                }
 
                // Update maximum count
                maxCount = Math.max(maxCount, currCount);
 
                // Reset count array
                Arrays.fill(count, 0);
            }
 
            // If character is in lowercase
            if (str.charAt(i) >= 'a' && str.charAt(i) <= 'z')
            {
                count[str.charAt(i) - 'a']++;
            }
        }
        return maxCount;
    }
 
    // Driver code
    public static void main(String[] args) 
    {
        String str = "zACaAbbaazzC";
        System.out.println(maxLower(str));
    }
}
