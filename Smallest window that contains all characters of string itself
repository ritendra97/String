//Smallest window that contains all characters of string itself
import java.util.*;
public class Practice 
{
	static String findSubString(String str) 
    {
		int n=0;
		int count=0;
		int j=0;
		int i=0;
		int target = Integer.MAX_VALUE;
		int start_index=0;
		HashMap<Character,Integer> map = new HashMap<>();
		Set<Character> ans = new HashSet<Character>();
		for(int k=0;k<str.length();k++)
		{
		    ans.add(str.charAt(k));
		}
		n=ans.size();
		for(i =0;i<str.length();i++)
		{
			if(map.containsKey(str.charAt(i)))
		    {
		    	map.put(str.charAt(i),map.get(str.charAt(i))+1);
		    }
		    else
		    {
		    	count++;
		    	map.put(str.charAt(i), 1);
		    }
			if(n==count)
			{
				while(map.get(str.charAt(j))>1)
				{
					if(map.get(str.charAt(j))>1)
					{
						map.put(str.charAt(j),map.get(str.charAt(j))-1);
					}
					j++;
				}
				int len_window=i-j+1;
				if(target>len_window)
				{
					target=len_window;
					start_index=j;
				}
			}
		}
		return str.substring(start_index, start_index + target);
    }
	public static void main(String[] args)
	{
		String str = "aabcbcdbca"; 
        System.out.println("Smallest window containing all distinct"+" characters is: " + findSubString(str));
	}
}
// Below code by the way it is working with all the cases but one cas if duplicate present at last than it will not work
import java.util.*;
public class Practice 
{
	public static String findSubString( String str) 
    {
		String ans="";
		HashMap<Character, Integer> map2 = new HashMap<Character,Integer>();
		for(int i=0;i<str.length();i++)
		{
			char ch = str.charAt(i);
			map2.put(ch,map2.getOrDefault(ch, 0)+1);
		}
		int i=-1;
		int j=-1;
		HashMap<Character, Integer> map1 = new HashMap<Character,Integer>();
		while(true)
		{
			boolean f1 = false;
			boolean f2 = false;
			while(i<str.length()-1 && map1.size()<=map2.size())
			{
				f1=true;
				i++;
				char ch = str.charAt(i);
				if(map1.size()<=map2.size())
				{
					map1.put(ch,map1.getOrDefault(ch, 0)+1);
				}
			}
			while(j<i && map1.size()==map2.size())
			{
				f1=true;
				String pans = str.substring(j+1,i+1);
				if(ans.length()==0 || ans.length()>pans.length())
					ans=pans;
			    j++;
				char ch = str.charAt(j);
				if(map1.get(ch)==1)
					map1.remove(ch);
				else
					map1.put(ch, map1.get(ch)-1);
			}
			if(f1==false && f2==false)
				break;
		}
		return ans;
    }
	public static void main(String[] args) 
	{
		String str = "aaab";
		System.out.println(findSubString(str));
    }
}
// Below code will work with all the cases 

static final int MAX_CHARS = 256;
    static String findSubString(String str)
    {
        int n = str.length();
        int dist_count = 0;
 
        boolean[] visited = new boolean[MAX_CHARS];
        Arrays.fill(visited, false);
        for (int i = 0; i < n; i++) {
            if (visited[str.charAt(i)] == false) {
                visited[str.charAt(i)] = true;
                dist_count++;
            }
        }
        int start = 0, start_index = -1;
        int min_len = Integer.MAX_VALUE;
 
        int count = 0;
        int[] curr_count = new int[MAX_CHARS];
        for (int j = 0; j < n; j++) {
            curr_count[str.charAt(j)]++;
 
            if (curr_count[str.charAt(j)] == 1)
                count++;

            if (count == dist_count) {
                while (curr_count[str.charAt(start)] > 1) {
                    if (curr_count[str.charAt(start)] > 1)
                        curr_count[str.charAt(start)]--;
                    start++;
                }
                int len_window = j - start + 1;
                if (min_len > len_window) {
                    min_len = len_window;
                    start_index = start;
                }
            }
        }
        return str.substring(start_index, start_index + min_len);
    }
