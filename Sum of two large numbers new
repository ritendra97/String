// Longest subsequence where every character appears at-least k times
import java.util.*;
public class Practice 
{
	static String reverse(String s)
    {
        String p = "";
        char a[] = s.toCharArray();
        int i=0;
        int j=a.length-1;
        while(i<=j)
        {
            char temp = a[i];
            a[i]=a[j];
            a[j]=temp;
            i++;
            j--;
        }
        for(char c:a)
        {
            p+=c;
        }
        return p;
    }
    static String findSum(String X, String Y) 
    {
        int sum =0;
        String ans="";
        int carry=0;
        int l1 = X.length()-1;
        int l2 = Y.length()-1;
        while(l1>=0 && l2>=0)
        {
            int c1 = Character.getNumericValue(X.charAt(l1));
            int c2 = Character.getNumericValue(Y.charAt(l2));
            sum=c1+c2+carry;
            carry=sum/10;
            sum=sum%10;
            ans+=sum;
            l1--;
            l2--;
        }
        while(l1>=0)
        {
        	sum=Character.getNumericValue(X.charAt(l1))+carry;
        	carry=sum/10;
        	sum=sum%10;
            ans+=sum;
            l1--;
        }
        while(l2>=0)
        {
        	sum=Character.getNumericValue(Y.charAt(l2))+carry;
        	carry=sum/10;
        	sum=sum%10;
            ans+=sum;
            l2--;
        }
        if(carry>0)
        	ans+=carry;
        if(sum==0)
        	return new String("0");
        return reverse(ans);
    }
	public static void main(String[] args) 
	{
		String A = "3333311111111111";
		String B = "44422222221111";
		System.out.println(findSum(A,B));
    }
}
