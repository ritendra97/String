//Anagram Substring Search (Or Search for all permutations)
// thid code is efficient and good
import java.util.*;
public class StringProblem 
{
	static boolean compare(HashMap<Character,Integer> pat,HashMap<Character,Integer> search)
	{
		for(char c:search.keySet())
		{
			if(pat.get(c)!=search.get(c))
				return false;
		}
		return true;
	}
	static int search(String pattern, String txt) 
    { 
		int count=0;
		HashMap<Character,Integer> pat = new HashMap<>();
		HashMap<Character,Integer> search = new HashMap<>();
		for(int i=0;i<pattern.length();i++)
		{
			char ch = pattern.charAt(i);
			pat.put(ch, pat.getOrDefault(ch,0)+1);
		}
		for(int i=0;i<pattern.length();i++)
		{
			char ch = txt.charAt(i);
			search.put(ch, search.getOrDefault(ch,0)+1);
		}
		int n=pattern.length();
		while(n<txt.length())
		{
			if(compare(pat,search)==true)
				count++;
			
			char intwindowchar = txt.charAt(n);
			search.put(intwindowchar, search.getOrDefault(intwindowchar, 0)+1);
			
			int m = n-pattern.length();
			char outwindowchar = txt.charAt(m);
			if(search.get(outwindowchar)==1)
			{
				search.remove(outwindowchar);
			}
			else
			{
				search.put(outwindowchar, search.get(outwindowchar)-1);
			}
			n++;
		}
		if(compare(pat,search)==true)
			count++;
		return count;
    }
	public static void main(String[] args) 
	{

        String txt = "AAABABAA"; 
        String pat = "AABA"; 
        System.out.println(search(pat, txt));
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
import java.util.*;
public class Practice 
{
	static int MAX_CHAR = 256;
	static boolean compare(char arr1[], char arr2[]) 
    {
		for(int i=0;i<MAX_CHAR;i++)
		{
			if(arr1[i]!=arr2[i])
				return false;
		}
		return true;
    }
	static void search(String pat, String txt) 
    {
		int n = pat.length();
		int m = txt.length();
		char countP[] = new char[MAX_CHAR];
		char countTW[] = new char[MAX_CHAR];
		for(int i=0;i<n;i++)
		{
			countP[pat.charAt(i)-'A']++;
			countTW[txt.charAt(i)-'A']++; 
		}
		for(int j=n;j<m;j++)
		{  
		     if (compare(countP, countTW)) 
	             System.out.println("Found at Index " +(j-n));
			 countTW[txt.charAt(j)]++;
			 countTW[txt.charAt(j-n)]--;
		}
		if (compare(countP, countTW)) 
            System.out.println("Found at Index " +(m-n));
    }
	public static void main(String[] args) 
	{
		String txt = "BACDGABCDA"; 
        String pat = "ABCD"; 
        search(pat, txt); 
	}
}
