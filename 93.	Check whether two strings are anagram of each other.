//Check whether two strings are anagram of each other.
// There is multiple way to da that
import java.util.*;
public class Practice 
{
	static boolean areAnagram(char[] str1, char[] str2)
	{
		int n1=str1.length;
		int n2=str2.length;
		if(n1!=n2)
			return false;
		Arrays.sort(str1);
		Arrays.sort(str2);
		for(int i=0;i<n1;i++)
		{
			if(str1[i]!=str2[i])
				return false;
		}
		return true;
	}
	public static void main(String[] args) 
	{
		char str1[] = { 't', 'e', 's', 't' };
        char str2[] = { 't', 't', 'e', 'w' };
        System.out.print(areAnagram(str1,str2));
	}
}
// Second method is
import java.util.*;
public class Practice 
{
	static int MAX_CHAR=256;
	static boolean areAnagram(char[] str1, char[] str2)
	{
		int n1=str1.length;
		int n2=str2.length;
		int count[] = new int[MAX_CHAR];
		for(int i=0;i<n1;i++)
		{
			count[str1[i]-'a']++;
			count[str2[i]-'a']--;
		}
		if(n1!=n2)
			return false;
		for(int i=0;i<MAX_CHAR;i++)
		{
			if(count[i]!=0)
				return false;
		}
		return true;
	}
	public static void main(String[] args) 
	{
		char str1[] = { 't', 'e', 's', 't' };
        char str2[] = { 't', 't', 'e', 'w' };
        System.out.print(areAnagram(str1,str2));
	}
}
// Below is the best solution with O(1) space
import java.util.*;
public class Practice 
{
	static int MAX_CHAR=256;
	static boolean areAnagram(char[] str1, char[] str2)
	{
		int n1=str1.length;
		int n2=str2.length;
		int count=0;
		for(int i=0;i<n1;i++)
		{
			count=count+str1[i];
		}
		for(int i=0;i<n1;i++)
		{
			count=count-str2[i];
		}
		if(n1!=n2)
			return false;
		if(count!=0)
			return false;
		return true;
	}
	public static void main(String[] args) 
	{
		char str1[] = { 't', 'e', 's', 't' };
        char str2[] = { 't', 't', 'e', 'w' };
        System.out.print(areAnagram(str1,str2));
	}
}
