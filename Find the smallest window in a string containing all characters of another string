//Find the smallest window in a string containing all characters of another string
// this is bruteforce method below code has been optimized
import java.util.*;
public class StringProblem 
{
	static int max=Integer.MAX_VALUE;
	static int len=0;
	static int a=0;
	static int b=0;
	static int j;
	public static String smallestWindow(String s, String p)
    {
		HashMap<Character,Integer> map = new HashMap<>();
		for(int i=0;i<s.length();i++)
		{
			int count=0;
			for(int m=0;m<p.length();m++)
			{
				map.put(p.charAt(m), map.getOrDefault(p.charAt(m), 0)+1);
			}
			for(j=i;j<s.length();j++)
			{
				if(map.containsKey(s.charAt(j)))
				{
					count++;
					if(map.get(s.charAt(j))==1)
					{
						map.remove(s.charAt(j));
					}
					else
					{
						map.put(s.charAt(j),map.get(s.charAt(j))-1 );
					}
					if(count==p.length())
					{
						len = j-i;
						break;
					}
				}
				
			}
			if(max>len)
			{
				max=len;
				a=i;
				b=j;
			}
		}
		return s.substring(a,b+1);
    }
	public static void main(String[] args) 
	{
		String S = "geeksforgeeks";
        String P = "ork";
        System.out.println(smallestWindow(S,P));
	}
}
// this below code is optimized code
import java.util.*;
public class Practice 
{

	public static String smallestSubstringWithAllPatternCharcaters(String str, String pattern) 
	{
	    if (str == null || str.length() == 0 || pattern == null || pattern.length() == 0) {
	      return "";
	    }

	    Map<Character, Integer> map = new HashMap<>();
	    int matchedElement = 0;
	    int start = 0;
	    int minSubstringLegth = Integer.MAX_VALUE;
	    int minSubStringStart = 0;
	    
	    for (int i = 0; i < pattern.length(); i++) {
	      map.put(pattern.charAt(i), map.getOrDefault(pattern.charAt(i), 0) + 1);
	    }

	    for (int end = 0; end < str.length(); end++) {
	      char currentChar = str.charAt(end);

	      if (map.containsKey(currentChar)) {
	        map.put(currentChar, map.get(currentChar) - 1);

	        if (map.get(currentChar) >= 0) {
	          matchedElement++;
	        }
	      }

	      while (matchedElement == pattern.length()) {
	        if(end - start + 1 < minSubstringLegth) {
	          minSubstringLegth = end - start + 1;
	          minSubStringStart = start;
	        }
	        
	        char charAtStart = str.charAt(start++);

	        if (map.containsKey(charAtStart)) {
	          if (map.get(charAtStart) == 0) {
	            matchedElement--;
	          }

	          map.put(charAtStart, map.get(charAtStart) + 1);
	        }
	      }

	    }

	    if (minSubstringLegth > str.length()) {
	      return "";
	    }

	    return str.substring(minSubStringStart, minSubStringStart + minSubstringLegth);
	}
	public static void main(String[] args) 
	{
		String str = "this is a test string";
	    String pattern = "tist";
	    System.out.println(smallestSubstringWithAllPatternCharcaters(str, pattern));
	}
}
