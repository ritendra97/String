//Length of K unique Character Substring
import java.util.*;
public class StringProblem 
{
	public static int longestkSubstr(String s, int k) 
    {
        // can we use here sliding window concept
        int max=-1;
        HashMap<Character,Integer> map = new HashMap<>();
        int i=-1;
        int j=-1;
        while(true)
        {
            boolean f1 = false;
            boolean f2 = false;
            while(i<s.length()-1)
            {
                f1=true;
                i++;
                char ch = s.charAt(i);
                if(map.containsKey(ch))
                {
                	map.put(ch, map.get(ch)+1);
                }
                else
                	map.put(ch,1);
                if(map.size()<k)
                    continue;
                else if(map.size()==k)
                {
                   int len1 =i-j;
                   if(max<len1)
                      max=len1;
                }
                else
                   break;
            }
            while(j<i)
            {
                f2=true;
                j++;
                char ch = s.charAt(j);
                if(map.get(ch)==1)
                    map.remove(ch);
                else
                    map.put(ch,map.get(ch)-1);
                if(map.size()>k)
                   continue;
                else if(map.size()==k)
                {
                    int len2 = i-j;
                    if(max<len2)
                       max=len2;
                } 
                break;
            }
            if(f1==false && f2==false)
               break;
        }
        return max;
        
    }
	public static void main(String[] args) 
	{
       String s = "wlrbbmqbhcdarzowkkyhiddqscdxrjmowfrxsjybldbefsarcbynecdyggxxpklorellnmpapqfwkhopkmco";
       int k =5;
       System.out.println(longestkSubstr(s,k));
 	}

}
