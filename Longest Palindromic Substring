//Longest Palindromic Substring
//This is not efficient solution this is O(n2) Solution
import java.util.*;
public class Practice 
{
	static int longestPalSubstr(String str) 
    { 
		int maxlength = 1;
		int start = 0;
		int len = str.length();
		int low,high;
		for(int i=1;i<len;i++)
		{
			low=i-1;
			high=i;
			while(low>=0 && high<len && str.charAt(low)==str.charAt(high))
			{
				if(high-low+1>maxlength)
				{
					start=low;
					maxlength=high-low+1;
				}
				--low;
				++high;
			}
			low=i-1;
			high=i+1;
			while(low>=0 && high<len && str.charAt(low)==str.charAt(high))
			{
				if(high-low+1>maxlength)
				{
					start=low;
					maxlength=high-low+1;
				}
				--low;
				++high;
			}
		}
		System.out.println(str.substring(start,maxlength+start));
		return maxlength;
    }
	public static void main(String[] args) 
	{
		String str = "forgeeksskeegfor"; 
        System.out.println("Length is: " + longestPalSubstr(str));
	}
}
